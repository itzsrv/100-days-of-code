import java.util.*;
// Challenge 12

/* The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1+2+3+4+5+6+7 = 28. The first ten terms
 * would be:
 *            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1, 3
 * 6: 1, 2, 3, 6
 * 10: 1, 2, 5, 10
 * 15: 1, 3, 5, 15
 * 21: 1, 3, 7, 21
 * 28: 1, 2, 4, 7, 14, 28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */

public class challenge12 {
  // Function that creates a list up to the nth triangle number
  static long[] triangleNumbers(int n) {
    long[] triangles = new long[n+1];

    triangles[0] = 0;

    for(int i = 1; i < n+1; i++) {
      triangles[i] = triangles[i-1] + i;

      if(numOfDivisors(triangles[i]) > 500) {
        System.out.println(triangles[i] + " is the first triangle number to have over 500 divisors!");
        break;
      }
    }

    return triangles;
  }

  // Function to find the number of divisors a certain number has
  static int numOfDivisors(long n) {
    int count = 0;

    for(int i = 1; i <= Math.sqrt(n); i++) {
      if(n % i == 0) count += 2;
      if(i == Math.sqrt(n)) count--;
    }

    return count;
  }

  public static void main(String args[]) {
    triangleNumbers(100000000);
  }
}
